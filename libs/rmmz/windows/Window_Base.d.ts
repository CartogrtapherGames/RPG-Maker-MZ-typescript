
interface TextState {
  text: string;
  index: number;
  x: number;
  y: number;
  width: number;
  height: number;
  startX: number;
  startY: number;
  rtl: boolean;
  buffer: string;
  drawing: boolean;
  outputWidth: number;
  outputHeight: number;
}
declare abstract class Window_Base extends Window {

  protected _opening: boolean;
  protected _closing: boolean;
  protected _dimmerSprite: Sprite;

  constructor(rect: Rectangle);
  initialize(rect: Rectangle): void;
  destroy(options?: { children?: boolean; texture?: boolean; baseTexture?: boolean;}): void;
  checkRectObject(rect: Rectangle): void;
  lineHeight(): number;
  itemWidth(): number;
  itemHeight(): number;
  itemPadding(): number;
  baseTextRect(): Rectangle;
  loadWindowskin(): void;
  updatePadding(): void;
  updateBackOpacity(): void;
  fittingHeight(numLines: number): number;
  updateTone(): void;
  createContents(): void;
  destroyContents(): void;
  contentsWidth(): number;
  resetFontSettings(): void;
  resetTextColor(): void;
  update(): void;
  updateOpen(): void;
  updateClose(): void;
  // @ts-ignore
  open(): void;
  close(): void;
  isOpening(): boolean;
  isClosing(): boolean;
  show(): void;
  hide(): void;
  activate(): void;
  deactivate(): void;
  systemColor(): string;
  translucentOpacity(): number;
  changeTextColor(color: string): void;
  changeOutlineColor(color: string): void;
  changePaintOpacity(enabled: boolean): void;
  drawRect(x: number,y: number, width: number, height: number): void;
  drawText(text: string,x: number,y: number,maxWidth: number,align: string): void;
  textWidth(text: string): number;
  drawTextEx(text: string,x: number,y: number, width: number): void;
  textSizeEx(text: string): {width: number,height: number};
  createTextState(text: string,x: number,y: number,width: number): void;
  processAllText(textState: TextState): void;
  flushTextState(textState: TextState): void;
  createTextBuffer(rtl: boolean): string;
  convertEscapeCharacters(text: string): string;
  actorName(n: number): string;
  partyMemberName(n: number): string;
  processCharacter(textState: TextState): void;
  processControlCharacter(textState: TextState,c: string): void;
  processNewLine(textState: TextState): void;
  obtainEscapeCode(textState: TextState): string;
  obtainEscapeParam(textState:TextState): string;
  processEscapeCharacter(code: string,textState:TextState): void;
  processColorChange(colorIndex: number): void;
  processDrawIcon(iconIndex: number,textState: TextState): void;
  makeFontBigger(): void;
  makeFontSmaller(): void;
  calcTextHeight(textState: TextState): void;
  maxFontSizeInLine(line: string): number;
  drawIcon(iconIndex: string,x: number,y: number): void;
  drawFace(faceName: string,faceIndex: number,x: number,y: number, width: number,height: number): void;
  drawCharacter(characterName: string,characterIndex: number,x: number,y: number): void;
  drawItemName(item: Game_Item,x: number,y: number, width: number): void;
  drawCurrencyValue(value: string,unit: string,x: number,y: number,width: number): void;
  setBackgroundType(type: number): void;
  showBackgroundDimmer(): void;
  createDimmerSprite(): void;
  hideBackgroundDimmer(): void;
  updateBackgroundDimmer(): void;
  refreshDimmerBitmap(): void;
  playCursorSound(): void;
  playOkSound(): void;
  playBuzzerSound(): void;
}