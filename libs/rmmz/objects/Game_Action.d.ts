declare class Game_Action {

    public readonly EFFECT_RECOVER_HP: number;
    public readonly EFFECT_RECOVER_MP: number;
    public readonly EFFECT_GAIN_TP: number;
    public readonly EFFECT_ADD_STATE: number;
    public readonly EFFECT_REMOVE_STATE: number;
    public readonly EFFECT_ADD_BUFF: number;
    public readonly EFFECT_REMOVE_DEBUFF: number;
    public readonly EFFECT_SPECIAL: number;
    public readonly EFFECT_GROW: number;
    public readonly EFFECT_LEARN_SKILL: number;
    public readonly EFFECT_COMMON_EVENT: number;
    public readonly SPECIAL_EFFECT_ESCAPE: number;
    public readonly HITTYPE_CERTAIN: number;
    public readonly HITTYPE_PHYSICAL: number;
    public readonly HITTYPE_MAGICAL: number;
    
    protected _subjectActorId: number;
    protected _subjectEnemyIndex: number;
    protected _forcing: boolean;
    protected _item: Game_Item;
    protected _targetIndex: number;

    constructor(subject: Game_Battler, forcing: boolean);
    
    public initialize(subject: Game_Battler, forcing: boolean): void;
    public clear(): void;
    public setSubject(subject: Game_Battler): void;
    public subject(): Game_Battler;
    public friendsUnit(): Game_Battler;
    public opponentsUnit(): Game_Battler;
    public setEnemyAction(action: unknown): void;
    public setAttack(): void;
    public setGuard(): void;
    public setSkill(skillId: number): void;
    public setItem(itemId: number): void;
    public setItemObject(object: Record<string, unknown>): DataItemBase;
    public setTarget(targetIndex: number): void;
    public item(): DataItemBase;
    public isSkill(): boolean;
    public isItem(): boolean;
    public numRepeats(): number;
    public checkItemScope(list: number[]): boolean;
    public isForOpponent(): boolean;
    public isForFriend(): boolean;
    public isForEveryone(): boolean;
    public isForAliveFriend(): boolean;
    public isForDeadFriend(): boolean;
    public isForUser(): boolean;
    public isForOne(): boolean;
    public isForRandom(): boolean;
    public isForAll(): boolean;
    public needsSelection(): boolean;
    public numTargets(): boolean;
    public checkDamageType(list: number[]): boolean;
    public isHpEffect(): boolean;
    public isMpEffect(): boolean;
    public isDamage(): boolean;
    public isRecover(): boolean;
    public isDrain(): boolean;
    public isHpRecover(): boolean;
    public isMpRecover(): boolean;
    public isCertainHit(): boolean;
    public isPhysical(): boolean;
    public isMagical(): boolean;
    public isAttack(): boolean;
    public isGuard(): boolean;
    public isMagicSkill(): boolean;
    public decideRandomTarget(): void;
    public setConfusion(): void;
    public prepare(): void;
    public isValid(): boolean;
    public speed(): number;
    public makeTargets(): number[];
    public repeatTargets(targets: Game_Battler[]): number[];
    public confusionTarget(): boolean;
    public targetsForEveryone(): Game_Battler[];
    public targetsForOpponents(): Game_Battler[];
    public targetsForFriends(): Game_Battler[];
    public randomTargets(unit: Game_Unit) : Game_Battler[];
    public targetsForDead(unit: Game_Unit): Game_Battler[];
    public targetsForAlive(unit: Game_Unit): Game_Battler[];
    public targetsForDeadAndAlive(unit: Game_Unit): Game_Battler[];
    public evaluate(): number;
    public itemTargetCandidates(): Game_Battler[];
    public evaluateWithTarget(target: Game_Battler): number;
    public testApply(target: Game_Battler): number;
    public testLifeAndDeath(target: Game_Battler): boolean;
    public hasItemAnyValidEffects(target: Game_Battler): boolean;
    public testItemEffect(target: Game_Battler, effect: number): boolean;
    public itemCnt(target: Game_Battler): number;
    public itemMrf(target: Game_Battler): number;
    public itemHit(target: Game_Battler): number;
    public itemEva(target: Game_Battler): number;
    public itemCri(target: Game_Battler): number;
    public apply(target: Game_Battler): void;
    public makeDamageValue(target: Game_Battler, critical: boolean): number;
    public evalDamageFormula(target: Game_Battler): number;
    public elementsMaxRate(target: Game_Battler, elements: number[]): number;
    public applyCritical(damage: number): number;
    public applyVariance(damage: number, variance: number): number;
    public applyGuard(damage: number, target: Game_Battler): number;
    public executeDamage(target: Game_Battler, value: number): number;
    public executeHpDamage(target: Game_Battler, value: number): number;
    public executeMpDamage(target: Game_Battler, value: number): number;
    public gainDrainedHp(value: number): void;
    public gainDrainedMp(value: number): void;
    public applyItemEffect(target: Game_Battler, effect: number): void;
    public itemEffectRecoverHp(target: Game_Battler, effect: number): void;
    public itemEffectRecoverMp(target: Game_Battler, effect: number): void;
    public itemEffectGainTp(target: Game_Battler, effect: number): void;
    public itemEffectAddState(target: Game_Battler, effect: number): void;
    public itemEffectAddAttackState(target: Game_Battler, effect: number): void;
    public itemEffectAddNormalState(target: Game_Battler, effect: number): void;
    public itemEffectRemoveState(target: Game_Battler, effect: number): void;
    public itemEffectAddBuff(target: Game_Battler, effect: number): void;
    public itemEffectAddDebuff(target: Game_Battler, effect: number): void;
    public itemEffectRemoveBuff(target: Game_Battler, effect: number): void;
    public itemEffectRemoveDebuff(target: Game_Battler, effect: number): void;
    public itemEffectSpecial(target: Game_Battler, effect: number): void;
    public itemEffectGrow(target: Game_Battler, effect: number): void;
    public itemEffectLearnSkill(target: Game_Battler, effect: number): void;
    public itemEffectCommonEvent(target: Game_Battler, effect: number): void;
    public makeSuccess(target: Game_Battler): void;
    public applyItemUserEffect(): void;
    public lukEffectRate(target: Game_Battler): number;
    public applyGlobal(): void;
    public updateLastUsed(): void;
    public updateLastSubject(): void;
    public updateLastTarget(): void;
}